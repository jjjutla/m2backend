"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
const TASK_JEST = "test:jest";
const TASK_JEST_RUN_TESTS = "jest:run";
config_1.subtask(TASK_JEST_RUN_TESTS)
    .addFlag("watch", "Enables 'watch-mode'")
    .setAction(async ({ watch }, { config }) => {
    const { runCLI } = await Promise.resolve().then(() => __importStar(require("jest")));
    const testFailures = await new Promise((resolve, reject) => {
        const jestConfig = { watch };
        return runCLI(jestConfig, [config.paths.root + "/jest.config.js"])
            .then((result) => resolve(result))
            .catch((error) => reject(error));
    });
    return testFailures.results;
});
config_1.task(TASK_JEST, "Runs jest tests")
    .addFlag("watch", "Watch-Mode")
    .addFlag("noCompile", "Don't compile before running this task")
    .setAction(async ({ watch, testFiles, noCompile, }, { run, network }) => {
    if (!noCompile) {
        await run(task_names_1.TASK_COMPILE, { quiet: true });
    }
    const testFailures = await run(TASK_JEST_RUN_TESTS, { watch });
    if (network.name === plugins_1.HARDHAT_NETWORK_NAME) {
        const stackTracesFailures = await network.provider.send("hardhat_getStackTraceFailuresCount");
        if (stackTracesFailures !== 0) {
            console.warn(chalk_1.default.yellow(`Failed to generate ${stackTracesFailures} stack trace(s). Run Hardhat with --verbose to learn more.`));
        }
    }
    process.exitCode = testFailures;
    return testFailures;
});
//# sourceMappingURL=index.js.map